/* ------------------------------------------
  RESET
--------------------------------------------- */
body, div, h1, h2, h3, h4, h5, h6, p, blockquote, pre, dl, dt, dd, ol, ul, li, hr, fieldset, form, label, legend, th, td, article, aside, figure, footer, header, hgroup, menu, nav, section, summary, hgroup {
  margin: 0;
  padding: 0;
  border: 0; }

a:active, a:hover {
  outline: 0; }

@-webkit-viewport {
  width: device-width; }

@-moz-viewport {
  width: device-width; }

@-ms-viewport {
  width: device-width; }

@-o-viewport {
  width: device-width; }

@viewport {
  width: device-width; }

/** * Eric Meyer's Reset CSS v2.0 (http://meyerweb.com/eric/tools/css/reset/) * http://cssreset.com */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

@font-face {
  font-family: 'Calibri';
  src: url('../fonts/calibri.eot');
  /* IE9 Compat Modes */
  src: url('../fonts/calibri.eot?#iefix') format('embedded-opentype'), url('../fonts/calibri.woff') format('woff'), url('../fonts/calibri.ttf') format('truetype'), url('../fonts/calibri.svg#f7cee5eaf81ca6750bedc48055a4dffb') format('svg');
  /* Legacy iOS */
  font-style: normal;
  font-weight: 400; }

@font-face {
  font-family: 'Calibri Light';
  src: url('../fonts/calibriL.eot');
  /* IE9 Compat Modes */
  src: url('../fonts/calibriL.eot?#iefix') format('embedded-opentype'), url('../fonts/calibriL.woff') format('woff'), url('../fonts/calibriL.ttf') format('truetype'), url('../fonts/calibriL.svg#eab7a514c729b74dd996e35cfe17e8f8') format('svg');
  /* Legacy iOS */
  font-style: normal;
  font-weight: 200; }

/*                    **
**   Default styles   **
**                    */
body {
  margin: 0;
  padding: 0;
  color: #333;
  font-family: Lucida Sans Unicode, Lucida Grande, sans-serif;
  min-width: 320px;
  background-color: #f8f8f8;
  text-rendering: optimizeLegibility; }

body {
  color: #005670;
  font-family: 'Calibri'; }

a {
  text-decoration: none;
  -webkit-transition: all ease 500ms;
          transition: all ease 500ms; }

.bold {
  font-weight: 800; }

.light {
  font-family: 'Calibri Light';
  font-weight: 600;
  font-size: 70px;
  letter-spacing: -5px; }

.container {
  box-sizing: border-box;
  min-width: 1280px;
  max-width: 1280px;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  height: 100%; }

.container:after {
  content: " ";
  display: block;
  clear: both; }

/* main top block with text description */
.top {
  height: 498px;
  background: url(../img/bg_field.jpg) no-repeat;
  padding: 0 50px;
  position: relative; }
  .top-logo {
    padding-top: 90px; }
  .top h1 {
    font-size: 80px;
    margin-top: 4px;
    line-height: 70px;
    margin-bottom: 10px;
    letter-spacing: -2px; }
  .top h2 {
    color: #fff;
    font-size: 23px;
    font-weight: bold;
    text-shadow: 0 0 6px rgba(0, 0, 0, 0.99);
    letter-spacing: -1px; }
  .top-details {
    width: 407px;
    height: 237px;
    background-color: #f8f8f8;
    background-color: rgba(255, 255, 255, 0.42);
    position: absolute;
    right: 58px;
    top: 164px; }

/* hidden layers to show on coverage hover */
.hover {
  display: none;
  position: absolute;
  top: 0;
  width: 100%;
  height: 498px; }
  .hover .optHover {
    display: none; }
  .hover .description {
    width: 737px;
    background-color: #fff;
    background-color: rgba(255, 255, 255, 0.8);
    position: absolute;
    top: 164px;
    left: 50px;
    padding: 26px 12px 20px 20px;
    box-sizing: border-box; }
    .hover .description-title {
      font-size: 48px;
      font-weight: 600;
      text-transform: uppercase;
      display: inline-block;
      float: left;
      margin: 0;
      height: 40px; }
    .hover .description-text {
      font-family: 'Calibri Light';
      font-weight: 600;
      font-size: 14px;
      letter-spacing: -1px;
      color: #003545;
      line-height: 24px;
      word-spacing: 1px;
      text-align: justify;
      padding-top: 21px; }
  .hover .top-logo_hover {
    position: absolute;
    right: 34px;
    top: 30px;
    width: 148px; }
    .hover .top-logo_hover img {
      width: 100%; }

/* blocks with types of coverage  */
.do {
  padding: 35px 30px;
  box-sizing: border-box; }
  .do-block {
    margin-bottom: 14px; }
    .do-block b {
      font-size: 23px;
      display: block;
      letter-spacing: -1px; }
    .do-block span {
      font-size: 17px;
      line-height: 18px; }

.cover h3 {
  font-size: 30px;
  padding-top: 20px;
  padding-left: 50px;
  letter-spacing: -1px; }
.cover-options {
  padding-top: 16px;
  padding-left: 50px; }

.opt {
  width: 185px;
  height: 135px;
  float: left;
  padding-right: 13px;
  position: relative; }
  .opt-link img {
    display: block;
    width: 100%; }
  .opt-link .click {
    color: #FFF;
    font-size: 30px;
    font-weight: bold;
    text-shadow: 0 0 9px rgba(0, 47, 96, 0.75);
    text-align: center;
    position: absolute;
    top: 0;
    width: 185px;
    height: 100%;
    background: rgba(0, 86, 112, 0.34);
    box-sizing: border-box;
    padding-top: 40px;
    display: none; }
  .opt-link .title {
    box-sizing: border-box;
    position: relative;
    width: 185px;
    height: 29px;
    background-color: #005670;
    color: #fff;
    display: block;
    text-transform: uppercase;
    line-height: 32px;
    padding-left: 12px; }
    .opt-link .title .arr {
      position: absolute;
      right: 10px; }
  .opt-link:hover .click {
    display: block; }
/*# sourceMappingURL=data:application/json;base64, */